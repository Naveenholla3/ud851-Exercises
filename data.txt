Observation
Background

A malicious link injected in the application can be clicked by the victim expecting it to be part of the legitimate application. Link injection can be used by an attacker to facilitate various attacks such as: cross-site scripting, phishing, open-redirection, and cross-site request forgery.

Observation
An application link is created containing user-specified values which can lead to XSS attacks (if the value is rendered in the body) or CSRF attacks.

Instances
1.	\FCRM\CR Source code\CR-36-107182-creation - Bugfix CR\searchofflinedisplay.jsp: 111



Evidence:
 
Figure 5: User input is taken in the form of request.getParameter().
 
Figure 6: User input is used to create a clickable link.
Root Cause Analysis	An application link is created containing user-specified values which can lead to privilege escalation (re-writing the URL) , XSS attacks (if the value is rendered in the body) or CSRF attacks (due to absence of request verification tokens).
Sampling Size & Methodology	
Issue Assessment
Risk Impact	Medium	Risk Likelihood	Medium
Risk Description	Link injection occurs when the application does not handle user input correctly and the attacker is able to inject a URL into a link on the page. This vulnerability is similar to cross-site scripting. The main difference is that in cross-site scripting a javascript code is injected in the application where as in link injection a URL is injected. This mainly occurs because the application fails to validate and/or sanitize the user inputs. These inputs are then embedded in the response from the application.
A malicious link injected in the application can be clicked by the victim expecting it to be part of the legitimate application. Link injection can be used by an attacker to facilitate various attacks such as: cross-site scripting, phishing, open-redirection, and cross-site request forgery. Requests can be sent to the legitimate application or a malicious application without the victim's permission. In some cases, the victim can then be fooled into supplying confidential information to the attacker. If link injection occurs in an authenticated context it could facilitate an attacker stealing the session of the user.
Recommendation
Link injection is prevented by encoding data values containing malicious data before inserting the values onto the generated web page. Input Validation is not a viable remediation for link injection because two separate applications are often involved: the first stores the data and a second application generates the web page. Also, many input fields in applications need to accept arbitrary data; filtering out characters is often not acceptable.
Output Encoding requires that characters in data that may be interpreted as control characters in a given output context are encoded before they are inserted in that output context (parts of a web page in this case). Output Encoding libraries exist for most popular programming languages and frameworks.
A web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded using the proper scheme. The seven different encoding schemes are:
•	HTML Text Element
•	HTML Attribute
•	URL Parameter
•	JavaScript Literal
•	HTML Comment
•	HTTP Header
•	CSS Property
•	The browser's DOM
For example, the characters: <, >, ", ' are encoded as &#60;, &#62;, &#34;, &#39; for when those characters are inserted into an HTML Text Element. When those characters are inserted as a URL Parameter, the same characters are encoded as %3C, %3E, %22, %27.
URLs have to be encoded twice when they are the value of an HTML Attribute or used in an HTTP Header. The URL must first be encoded using URL encoding and encoded URL is encoded again for use as an HTML Attribute or HTTP Parameter.
Libraries for implementing the encoding schemes exist for most popular programming languages.
•	OWASP Java Encoder: Java only
•	Microsoft Web Protection Library: .NET languages
•	Ruby - escapeHTML() - only supports HTML Text Encoding
•	Jgencoder in JQuery: for preventing DOM-based XSS
Green field projects can consider the use of other technologies:
•	Google Capabilities based JavaScript CAJA
•	OWASP JXT- automatically encodes string data with the proper encoding
