{"practiceType":"Secure Development","selectedClient":"Standard","associated":[],"metadata":{"clientName":"Standard","clientAddress":"","appName":"","appDescription":"","testType":"Penetration Test - Essential","startDate":"","endDate":"","scope":"","scopeType":"","outOfScope":"","outOfScopeType":"","controlList":"","consultantName":"","consultantTitle":"","consultantNumber":"","consultantEmail":"","oversightName":"","oversightTitle":"Security Consultant","oversightNumber":"703-404-9293 x","oversightEmail":"@synopsys.com","clientManagerName":"","clientManagerTitle":"","clientManagerNumber":"703-404-9293 x","clientManagerEmail":"@synopsys.com","confidentiality":"ND","integrity":"ND","availability":"ND","hash":"671a150524115bebb83a413aff86231f28604a2ea04c930ae3cf27e531b78be4","versionNumber":"2019.03","isTWBAssessment":"false","testID":"","totalInstances":0,"pciReport":false,"retest":false},"findings":[{"identifier":86707,"name":"Weak SSL/TLS Configuration","description":"The server-side SSL/TLS endpoint is configured to allow weak SSL/TLS cipher suites. These cipher suites have proven cryptographic flaws that can allow an attacker to decrypt or modify traffic. These weak cipher suites include the following:<br>\n<ul>\n<li>Cipher suites that use RC4 for encryption; RC4 contains several known weaknesses. In particular, an attacker that can gather a large number of ciphertexts that contain the same plaintext encrypted using different keys may be able to recover the plaintext (the typical target of this attack would be a cookie that is sent in multiple SSL/TLS sessions).</li>\n<li>Cipher suites that use block ciphers (e.g. AES, 3DES) in CBC mode; these are vulnerable to the BEAST attack if SSL 3.0 or TLS 1.0 are supported. Even if newer versions of TLS are also supported by the server, older client software might establish SSL 3.0 or TLS 1.0 connections. Additionally, an attacker may be able to use the POODLE attack to downgrade the connection to SSL 3.0 or TLS 1.0 even if both the client and the server support newer versions of TLS. BEAST allows an attacker on the same network as an end user, who can inject code into any site open in the user's browser, to decrypt cookies (or other sensitive data that is part of each request) for the vulnerable site.</li>\n<li>Cipher suites that use the DES block cipher; these cipher suites use 56-bit keys for encryption, which are brute-forceable.</li>\n<li>EXPORT-strength cipher suites use encryption key lengths that are vulnerable to brute force attacks (40 bits or 56 bits for symmetric key algorithms and 512 bits for the RSA asymmetric key algorithm). Note that even if stronger algorithms are preferred by the server, having EXPORT-strength cipher suites enabled is dangerous due to attacks like FREAK and Logjam.</li>\n<li>Cipher suites with NULL for encryption do not offer any encryption for the connection.</li>\n<li>Anonymous Diffie-Hellman cipher suites do not authenticate the endpoints and are vulnerable to man-in-the-middle attackers that can perform active attacks to read/modify traffic.</li>\n</ul><br>A server-side SSL/TLS endpoint that supports weak ciphers could allow an attacker to read or modify traffic sent in SSL/TLS connections with that endpoint.","note":"","instances":[],"systemic":"false","fixLocation":null,"screenshots":[],"stepsToReproduce":"","likelihoodDescription":"","impactDescription":"","contextDescription":"The application supports deprecated versions of SSL protocol which contain known weaknesses.<br>\n","remediation":"The server-side TLS endpoint's configuration should be updated to allow only TLSv1.2 connections with cipher suites that use:<br>\n<ul>\n<li>Ephemeral Diffie-Hellman for key exchange (optionally, allow RSA for key exchange if necessary for supporting some clients)</li>\n<li>Block ciphers with key lengths of at least 128 bits (AES-128 and AES-256; optionally allow 3DES with 112-bit keys if necessary for supporting some clients)</li>\n<li>Block ciphers in GCM mode. Note: If CBC mode must be allowed for supporting some clients, use only CBC mode cipher suites that use the SHA2 family of hash functions (SHA256, SHA384, SHA512)\nNote that all modern browsers support TLSv1.2.</li>\n</ul>","foundBy":"Manual","risk":{"type":"NIST","impact":"High","likelihood":"Medium","severity":"Medium"},"bnySeverityRiskLevels":["--select severity--","Critical","High","Medium","Low","Informational"],"cvdId":"50","appscanTitle":"","itrc":"","cweId":"327","cweIdFlawName":"","cweIdCategory":"","pciId":"6.5.4 ","pciDesc":" Insecure Communication","flawCount":0},{"identifier":38190,"name":"Improper Certificate Validation","description":"The application stores or processes untrusted data that has not been sufficiently validated. This may be due to a complete lack of validation or validation filters whose implementation does not provide sufficient protection for the given input. An application may obtain data from various external and internal sources including databases, file servers, web services, external client requests, etc. While some of these sources may be considered trustworthy, no assumptions should be made about the validity of data whose source cannot be explicitly verified. This includes not only external data, but also data that was previously stored by the same application and data generated by other entities in the same organization.<br>\n\nFailure to properly validate and handle untrusted input represents the single largest category of software security weaknesses. At a minimum, data that is not validated may impact the application's control flow or data flow, leading to unexpected application states for end users, unintended changes to back-end data, as well as unexpected outcomes from executed application logic.<br>\n\nCertificate validation allows an application to verify the host with which it is communicating. Without proper certificate validation an attacker can trick the application into connecting to a malicious host by spoofing requests. The application will then communicate with the malicious host like it would with the trusted host.<br>\n","note":"","instances":[],"systemic":"false","fixLocation":null,"screenshots":[],"stepsToReproduce":"","likelihoodDescription":"","impactDescription":"","contextDescription":"Application accepts all certificates without validation during SSL handshake<br>\n","remediation":"SSL Certificate validation should be enabled to avoid man in the middle attacks.<br>\n","foundBy":"Manual","risk":{"type":"NIST","impact":"Low","likelihood":"Low","severity":"Low"},"bnySeverityRiskLevels":["--select severity--","Critical","High","Medium","Low","Informational"],"cvdId":"-1","appscanTitle":"","itrc":"","cweId":"","cweIdFlawName":"","cweIdCategory":"","pciId":"","pciDesc":"","flawCount":0}],"customFields":[{"name":"assessmentNotes","label":"Assessment Notes","fieldType":"textarea","value":""}],"riskType":"NIST5","billable":"true","sdr":"false","priorTestingFlag":"false","generatedBy":"tort","totalUploadedFileSize":0}