{"practiceType":"Secure Development","selectedClient":"Standard","associated":[],"metadata":{"clientName":"Standard","clientAddress":"","appName":"","appDescription":"","testType":"Penetration Test - Essential","startDate":"","endDate":"","scope":"","scopeType":"","outOfScope":"","outOfScopeType":"","controlList":"","consultantName":"","consultantTitle":"","consultantNumber":"","consultantEmail":"","oversightName":"","oversightTitle":"Security Consultant","oversightNumber":"703-404-9293 x","oversightEmail":"@synopsys.com","clientManagerName":"","clientManagerTitle":"","clientManagerNumber":"703-404-9293 x","clientManagerEmail":"@synopsys.com","confidentiality":"","integrity":"","availability":"","hash":"671a150524115bebb83a413aff86231f28604a2ea04c930ae3cf27e531b78be4","versionNumber":"2019.03","isTWBAssessment":"false","testID":"","totalInstances":0,"pciReport":false,"retest":false},"findings":[{"identifier":8747,"name":"Secure Cookie Attribute Not Set","description":"The 'Secure' attribute helps prevent cookies from being stolen by attackers on the same LAN as victims; cookies without this attribute can be stolen. If the 'Secure' attribute is set on a cookie, modern browsers will only send it over HTTPS connections (and not over HTTP). \nIf this attribute is not set, the cookie will be sent to the vulnerable site along with all HTTP requests to that site, and an attacker that can sniff traffic between the victim and the server will be able to steal the cookies.<br>\n\nThe 'Secure' attribute needs to be set even if the vulnerable site only serves content over HTTPS and does not listen for HTTP traffic. An attacker on the same LAN as the victim can inject arbitrary content into any page from another site that is served over HTTP. If a victim has two pages open in a browser (e.g. https://vulnerable-site.com/ and http://www.example.com/), an attacker on the same LAN as the victim can inject content such as the following into http://www.example.com/:<br>\n\n&lt;img src=\"http://vulnerable-site.com/any_path\"&gt;<br>\n\nThen, the attacker would eavesdrop the HTTP request to \"http://vulnerable-site.com/any_path\" and get the value of the cookie that will be automatically sent with the requests.<br>\nIf the 'Secure' attribute is not set on a victim's cookie, the cookie can be stolen by an attacker on the same LAN as the victim. If the cookie contains the victim's session identifier, then the attacker can steal the victim's session.<br>\n","note":"","instances":[],"systemic":"false","fixLocation":null,"screenshots":[],"stepsToReproduce":"","likelihoodDescription":"","impactDescription":"","contextDescription":"","remediation":"The 'Secure' attribute should be set on all cookies that contain sensitive values such as session IDs. Many application servers allow this to be done declaratively or through an administration interface; other application servers require the attribute to be set programmatically. The mitigation details depend on the application server being used.<br>\n\nNote that this mitigation is only feasible when the cookie does not need to be accessed by pages that are accessible over HTTP. Maintaining session state securely across a site with mixed HTTP and HTTPS content is non-trivial.<br>\n","foundBy":"Manual","risk":{"type":"NIST","impact":"High","likelihood":"Low","severity":"Low"},"bnySeverityRiskLevels":["--select severity--","Critical","High","Medium","Low","Informational"],"cvdId":"2","appscanTitle":"","itrc":"","cweId":"614","cweIdFlawName":"","cweIdCategory":"","pciId":"6.5.10 ","pciDesc":" Broken Authentication and Session Management","flawCount":0},{"identifier":32845,"name":"Empty Password","description":"The application allows users to set empty (0-character length) account passwords or connects to other systems using credentials with an empty password. The security of any resource protected by such credentials is reduced to the privacy of the username alone, since an attacker need only guess the username to successfully authenticate. Since many systems use a pattern or easily guessed piece of information to set usernames (such as the user's email address), the username alone is not sufficient protection.<br>An attacker who guesses or otherwise obtains a username set with an empty password needs no further information to authenticate and impersonate the victim in the application or system. This grants the attacker access to all data and functionality the compromised credentials protect.","note":"","instances":[],"systemic":"false","fixLocation":null,"screenshots":[],"stepsToReproduce":"","likelihoodDescription":"","impactDescription":"","contextDescription":"","remediation":"Always require strong passwords for authentication to prevent unauthorized access to user accounts. A strong password policy is one which combines rules to prevent easily-guessable passwords from being used while also ensuring that passwords contain sufficient entropy. This will minimize the likelihood that an attack will be successful if an attacker attempts to guess commonly-used passwords or employs an automated dictionary attack against a particular user.<br>\nIn the event that company policy does not stipulate password requirements, or the existing requirements are weak, consider employing the following password requirements:<br>\n&lt;ul&gt; \n&lt;li&gt;Passwords must be at least eight (8) characters long.&lt;/li&gt; \n&lt;li&gt;The application must compare the end user's selected password against a list of commonly used, expected or compromised passwords. This list may include but is not limited to : dictionary words, commonly-used passwords, repetitive or sequential characters, context specific words, and passwords that have been compromised in a known data breach. The application must reject the user's password if it is found in the list and provide a reason for rejection to the user.&lt;/li&gt; \n&lt;li&gt;The application must generate at least six (6) characters long passwords when creating temporary passwords such as first time login passwords. The user must be required to update their passwords next time they login. &lt;/li&gt; \n&lt;li&gt;The application must enforce password change if there is evidence of compromise.&lt;/li&gt;\n&lt;/ul&gt;<br>\nIn addition, Synopsys also recommends following best practices:<br>\n&lt;ul&gt; \n&lt;li&gt;The application should allow at least 64 characters long passwords and must not perform truncation.&lt;/li&gt; \n&lt;li&gt;The application should provide a password strength meter to assist the user in choosing a strong password.&lt;/li&gt; \n&lt;/ul&gt;<br>\nPlease refer, Section 5.1.1. Memorized Secret and Appendix A--Strength of Memorized Secrets of NIST Special Publication 800-63B (https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63b.pdf) for additional details.","foundBy":"Manual","risk":{"type":"NIST","impact":"Low","likelihood":"Low","severity":"Low"},"bnySeverityRiskLevels":["--select severity--","Critical","High","Medium","Low","Informational"],"cvdId":"444","appscanTitle":"","itrc":"","cweId":"258","cweIdFlawName":"","cweIdCategory":"","pciId":"N/A","flawCount":0},{"identifier":64178,"name":"User IDs and/or Passwords Hardcoded in Source Code","description":"The application stores sensitive information such as usernames and passwords insecurely. When the application communicates with external and internal entities, it may store credentials in clear text within a properties file, or as hard coded text within the source code. Even if access to properties files and source code is restricted to a group of internal users, it is still important to consider unauthorized malicious employees that have access to the data center and web server as a potential threat.<br>\n","note":"","instances":[],"systemic":"false","fixLocation":null,"screenshots":[],"stepsToReproduce":"","likelihoodDescription":"","impactDescription":"","contextDescription":"","remediation":"It is recommended to store passwords outside the source code. While it is a good practice to store credentials in properties files, it's a best practice to encrypt them within the properties file and store the key in a safe location. This is especially necessary if people other than the administrators have access to the properties file. Upon encryption, if different people need access to the properties file, access to the encryption key should be restricted.<br>\n","foundBy":"Manual","risk":{"type":"NIST","impact":"Low","likelihood":"Low","severity":"Low"},"bnySeverityRiskLevels":["--select severity--","Critical","High","Medium","Low","Informational"],"cvdId":"-1","appscanTitle":"","itrc":"","cweId":"256","cweIdFlawName":"","cweIdCategory":"","pciId":"","pciDesc":"","flawCount":0}],"customFields":[{"name":"assessmentNotes","label":"Assessment Notes","fieldType":"textarea","value":""}],"riskType":"NIST5","billable":"true","sdr":"false","priorTestingFlag":"false","generatedBy":"tort","totalUploadedFileSize":0}